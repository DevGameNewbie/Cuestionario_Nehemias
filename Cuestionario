<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üèÜ Trivia de Nehem√≠as - Desaf√≠o B√≠blico üèÜ</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            animation: backgroundShift 10s ease-in-out infinite alternate;
        }

        @keyframes backgroundShift {
            0% { background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%); }
            100% { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 50%, #43e97b 100%); }
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 90%;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #f7b733);
            animation: progressGlow 2s ease-in-out infinite alternate;
        }

        @keyframes progressGlow {
            0% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .subtitle {
            font-size: 1.2rem;
            color: #7f8c8d;
            font-weight: 300;
        }

        .stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            border-radius: 15px;
            color: white;
            box-shadow: 0 10px 30px rgba(116, 185, 255, 0.3);
        }

        .stat-item {
            text-align: center;
            flex: 1;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            display: block;
            animation: pulse 2s ease-in-out infinite;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .question-container {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            border-left: 5px solid #3498db;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }

        .question-container:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .question-number {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.2rem;
            margin-bottom: 15px;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }

        .question-type {
            background: linear-gradient(135deg, #f39c12, #e67e22);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 15px;
            display: inline-block;
            box-shadow: 0 3px 10px rgba(243, 156, 18, 0.3);
        }

        .question-text {
            font-size: 1.3rem;
            color: #2c3e50;
            margin-bottom: 20px;
            line-height: 1.6;
            font-weight: 500;
        }

        .options {
            display: grid;
            gap: 12px;
            margin-bottom: 20px;
        }

        .option, .fill-blank-input {
            background: white;
            border: 2px solid #ecf0f1;
            border-radius: 12px;
            padding: 15px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            font-weight: 400;
            position: relative;
            overflow: hidden;
        }

        .option::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .option:hover::before {
            left: 100%;
        }

        .option:hover, .fill-blank-input:focus {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(52, 152, 219, 0.15);
        }

        .option.selected {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            border-color: #0984e3;
            color: white;
            font-weight: 600;
        }

        .option.correct {
            background: linear-gradient(135deg, #00b894, #00a085);
            border-color: #00a085;
            color: white;
            animation: correctAnswer 0.6s ease;
        }

        .option.incorrect {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            border-color: #c0392b;
            color: white;
            animation: incorrectAnswer 0.6s ease;
        }

        @keyframes correctAnswer {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes incorrectAnswer {
            0%, 20%, 40%, 60%, 80% { transform: translateX(0); }
            10%, 30%, 50%, 70% { transform: translateX(-5px); }
            15%, 35%, 55%, 75% { transform: translateX(5px); }
        }

        .fill-blank-container {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 10px;
            font-size: 1.3rem;
            line-height: 2;
        }

        .fill-blank-input {
            border: 2px solid #3498db;
            min-width: 150px;
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
            cursor: text;
        }

        .buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 25px;
        }

        .btn {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 5px 15px rgba(116, 185, 255, 0.3);
            position: relative;
            overflow: hidden;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(116, 185, 255, 0.4);
        }

        .btn:active {
            transform: translateY(-1px);
        }

        .btn-next {
            background: linear-gradient(135deg, #00b894, #00a085);
            box-shadow: 0 5px 15px rgba(0, 184, 148, 0.3);
        }

        .btn-next:hover {
            box-shadow: 0 8px 25px rgba(0, 184, 148, 0.4);
        }

        .btn-restart {
            background: linear-gradient(135deg, #e17055, #d63031);
            box-shadow: 0 5px 15px rgba(225, 112, 85, 0.3);
        }

        .btn-restart:hover {
            box-shadow: 0 8px 25px rgba(225, 112, 85, 0.4);
        }

        .result-container {
            text-align: center;
            padding: 40px;
            background: linear-gradient(135deg, #a29bfe, #6c5ce7);
            border-radius: 20px;
            color: white;
            margin-top: 30px;
            box-shadow: 0 15px 35px rgba(162, 155, 254, 0.3);
        }

        .final-score {
            font-size: 4rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
            animation: scoreAppear 1s ease;
        }

        @keyframes scoreAppear {
            0% { opacity: 0; transform: scale(0.5); }
            70% { transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }

        .performance {
            font-size: 1.5rem;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .emoji-celebration {
            font-size: 3rem;
            margin: 20px 0;
            animation: bounce 1s ease-in-out infinite alternate;
        }

        @keyframes bounce {
            0% { transform: translateY(0); }
            100% { transform: translateY(-10px); }
        }

        .explanation {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            color: #856404;
            font-size: 0.95rem;
            line-height: 1.5;
        }

        .explanation-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: #533f03;
        }

        .hidden {
            display: none;
        }

        /* Efectos de part√≠culas */
        .particle {
            position: absolute;
            width: 8px;
            height: 8px;
            background: #ffd700;
            border-radius: 50%;
            pointer-events: none;
            animation: float 3s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); opacity: 0; }
            50% { transform: translateY(-30px) rotate(180deg); opacity: 1; }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container { padding: 20px; margin: 10px; }
            .title { font-size: 2rem; }
            .stats { flex-direction: column; gap: 15px; }
            .question-text { font-size: 1.1rem; }
            .buttons { flex-direction: column; align-items: center; }
            .fill-blank-container { font-size: 1.1rem; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üèÜ Trivia de Nehem√≠as</h1>
            <!-- <p class="subtitle">Pon a prueba tu conocimiento del libro de Nehem√≠as</p> -->
        </div>

        <div class="stats">
            <div class="stat-item">
                <span class="stat-number" id="currentQuestion">1</span>
                <span class="stat-label">Pregunta</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="score">0</span>
                <span class="stat-label">Puntos</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="accuracy">100%</span>
                <span class="stat-label">Precisi√≥n</span>
            </div>
        </div>

        <div id="questionContainer" class="question-container">
            <!-- Las preguntas se cargar√°n aqu√≠ din√°micamente -->
        </div>

        <div class="buttons">
            <button id="submitBtn" class="btn">Responder</button>
            <button id="nextBtn" class="btn btn-next hidden">Siguiente ‚û§</button>
        </div>

        <div id="resultContainer" class="result-container hidden">
            <!-- Los resultados finales aparecer√°n aqu√≠ -->
        </div>
    </div>

    <script>
        class NehemiasTrivia {
            constructor() {
                this.currentQuestionIndex = 0;
                this.score = 0;
                this.totalQuestions = 0;
                this.correctAnswers = 0;
                this.userAnswers = [];
                
                this.questions = [
                    // NEHEM√çAS CAP√çTULO 1 - PREGUNTAS ESPEC√çFICAS
                    
                    // Preguntas de Selecci√≥n M√∫ltiple
                    {
                        type: 'multiple',
                        question: '¬øEn qu√© mes recibi√≥ Nehem√≠as las noticias sobre Jerusal√©n?',
                        options: ['Nis√°n', 'Quisleu', 'Adar', 'Elul'],
                        correct: 1,
                        explanation: 'Nehem√≠as 1:1: "Palabras de Nehem√≠as hijo de Hacal√≠as. Aconteci√≥ en el mes de Quisleu, en el a√±o veinte..."',
                        points: 10
                    },
                    {
                        type: 'multiple',
                        question: '¬øQui√©n le dio a Nehem√≠as las noticias sobre Jerusal√©n?',
                        options: ['Esdras', 'Hanani', 'Zorobabel', 'Sanbalat'],
                        correct: 1,
                        explanation: 'Nehem√≠as 1:2: "Vino Hanani, uno de mis hermanos, con algunos varones de Jud√°, y les pregunt√© por los jud√≠os..."',
                        points: 12
                    },
                    {
                        type: 'multiple',
                        question: '¬øEn qu√© a√±o del rey Artajerjes ocurrieron estos eventos?',
                        options: ['A√±o dieciocho', 'A√±o veinte', 'A√±o treinta', 'A√±o cuarenta'],
                        correct: 1,
                        explanation: 'Nehem√≠as 1:1: "...en el a√±o veinte, que yo estaba en Susa, capital del reino"',
                        points: 15
                    },
                    {
                        type: 'multiple',
                        question: '¬øC√≥mo estaban las puertas de Jerusal√©n seg√∫n el informe?',
                        options: ['Cerradas', 'Abiertas', 'Consumidas por el fuego', 'En reparaci√≥n'],
                        correct: 2,
                        explanation: 'Nehem√≠as 1:3: "...el muro de Jerusal√©n derribado, y sus puertas quemadas a fuego"',
                        points: 10
                    },
                    {
                        type: 'multiple',
                        question: '¬øCu√°ntos d√≠as dur√≥ el duelo de Nehem√≠as?',
                        options: ['Tres d√≠as', 'Siete d√≠as', 'Algunos d√≠as', 'Cuarenta d√≠as'],
                        correct: 2,
                        explanation: 'Nehem√≠as 1:4: "...me sent√© y llor√©, e hice duelo por algunos d√≠as, y ayun√© y or√© delante del Dios de los cielos"',
                        points: 8
                    },
                    {
                        type: 'multiple',
                        question: '¬øC√≥mo llama Nehem√≠as a Dios en su oraci√≥n?',
                        options: ['Jehov√°, Dios fuerte', 'Jehov√°, Dios de los cielos, fuerte, grande y temible', 'Dios Todopoderoso', 'Se√±or de se√±ores'],
                        correct: 1,
                        explanation: 'Nehem√≠as 1:5: "Te ruego, oh Jehov√°, Dios de los cielos, fuerte, grande y temible..."',
                        points: 12
                    },
                    {
                        type: 'multiple',
                        question: '¬øA qui√©nes incluye Nehem√≠as en su confesi√≥n de pecados?',
                        options: ['Solo a √©l mismo', 'A √©l y su familia', 'A √©l, su casa y los hijos de Israel', 'Solo al pueblo'],
                        correct: 2,
                        explanation: 'Nehem√≠as 1:6: "...y confieso los pecados de los hijos de Israel que hemos cometido contra ti; s√≠, yo y la casa de mi padre hemos pecado"',
                        points: 14
                    },
                    
                    // Preguntas Verdadero/Falso
                    {
                        type: 'boolean',
                        question: 'Nehem√≠as estaba en Babilonia cuando recibi√≥ las noticias sobre Jerusal√©n.',
                        options: ['Verdadero', 'Falso'],
                        correct: 1,
                        explanation: 'Falso. Nehem√≠as 1:1 dice que estaba "en Susa, capital del reino", no en Babilonia.',
                        points: 8
                    },
                    {
                        type: 'boolean',
                        question: 'Nehem√≠as ayun√≥ como parte de su respuesta al escuchar sobre Jerusal√©n.',
                        options: ['Verdadero', 'Falso'],
                        correct: 0,
                        explanation: 'Verdadero. Nehem√≠as 1:4: "...ayun√© y or√© delante del Dios de los cielos"',
                        points: 8
                    },
                    {
                        type: 'boolean',
                        question: 'La oraci√≥n de Nehem√≠as se enfoca solo en alabar a Dios.',
                        options: ['Verdadero', 'Falso'],
                        correct: 1,
                        explanation: 'Falso. Su oraci√≥n incluye alabanza, confesi√≥n de pecados, recordatorio de promesas divinas y petici√≥n espec√≠fica.',
                        points: 10
                    },
                    {
                        type: 'boolean',
                        question: 'Nehem√≠as confes√≥ que tanto √©l como su pueblo hab√≠an pecado.',
                        options: ['Verdadero', 'Falso'],
                        correct: 0,
                        explanation: 'Verdadero. Nehem√≠as 1:6-7: "...confieso los pecados de los hijos de Israel que hemos cometido contra ti; s√≠, yo y la casa de mi padre hemos pecado"',
                        points: 8
                    },
                    {
                        type: 'boolean',
                        question: 'Nehem√≠as menciona las promesas que Dios hizo a Mois√©s.',
                        options: ['Verdadero', 'Falso'],
                        correct: 0,
                        explanation: 'Verdadero. Nehem√≠as 1:8: "Acu√©rdate ahora de la palabra que diste a Mois√©s tu siervo..."',
                        points: 10
                    },
                    {
                        type: 'boolean',
                        question: 'Nehem√≠as menciona que serv√≠a como copero al rey al final del cap√≠tulo.',
                        options: ['Verdadero', 'Falso'],
                        correct: 0,
                        explanation: 'Verdadero. Nehem√≠as 1:11: "Porque yo serv√≠a de copero al rey"',
                        points: 12
                    },
                    
                    // Preguntas de Llenar Espacios
                    {
                        type: 'fill',
                        question: 'Nehem√≠as estaba en _______, _______ del reino, cuando recibi√≥ las noticias.',
                        blanks: ['Susa', 'capital'],
                        explanation: 'Nehem√≠as 1:1: "...que yo estaba en Susa, capital del reino"',
                        points: 15
                    },
                    {
                        type: 'fill',
                        question: '"Los que quedaron de la _______ en la provincia est√°n en gran _______ y afrenta"',
                        blanks: ['cautividad', 'mal'],
                        explanation: 'Nehem√≠as 1:3: "...Los que quedaron de la cautividad all√≠ en la provincia, est√°n en gran mal y afrenta..."',
                        points: 16
                    },
                    {
                        type: 'fill',
                        question: 'Nehem√≠as or√≥: "Est√© ahora atento tu _______ y abiertos tus _______ para o√≠r la oraci√≥n de tu siervo"',
                        blanks: ['o√≠do', 'ojos'],
                        explanation: 'Nehem√≠as 1:6: "Est√© ahora atento tu o√≠do y abiertos tus ojos para o√≠r la oraci√≥n de tu siervo..."',
                        points: 18
                    },
                    {
                        type: 'fill',
                        question: 'Nehem√≠as reconoce que Dios guarda "el _______ y la _______" a los que le aman.',
                        blanks: ['pacto', 'misericordia'],
                        explanation: 'Nehem√≠as 1:5: "...que guarda el pacto y la misericordia a los que le aman y guardan sus mandamientos"',
                        points: 17
                    },
                    {
                        type: 'fill',
                        question: '"Si vosotros _______, yo os _______ por los pueblos"',
                        blanks: ['pecareis', 'esparcir√©'],
                        explanation: 'Nehem√≠as 1:8: "Acu√©rdate ahora de la palabra que diste a Mois√©s tu siervo, diciendo: Si vosotros pecareis, yo os esparcir√© por los pueblos"',
                        points: 15
                    },
                    {
                        type: 'fill',
                        question: '"Aunque vuestra _______ fuere hasta el extremo de los cielos, de all√≠ os _______"',
                        blanks: ['dispersi√≥n', 'recoger√©'],
                        explanation: 'Nehem√≠as 1:9: "...aunque vuestra dispersi√≥n fuere hasta el extremo de los cielos, de all√≠ os recoger√©..."',
                        points: 16
                    },
                    {
                        type: 'fill',
                        question: 'Nehem√≠as pidi√≥: "concede ahora buen _______ a tu siervo, y dale _______ delante de este var√≥n"',
                        blanks: ['√©xito', 'gracia'],
                        explanation: 'Nehem√≠as 1:11: "...concede ahora buen √©xito a tu siervo, y dale gracia delante de este var√≥n..."',
                        points: 20
                    }
                ];
                
                this.totalQuestions = this.questions.length;
                this.init();
            }

            init() {
                this.loadQuestion();
                this.setupEventListeners();
                this.createParticles();
            }

            setupEventListeners() {
                document.getElementById('submitBtn').addEventListener('click', () => this.submitAnswer());
                document.getElementById('nextBtn').addEventListener('click', () => this.nextQuestion());
                document.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !document.getElementById('submitBtn').classList.contains('hidden')) {
                        this.submitAnswer();
                    }
                });
            }

            loadQuestion() {
                const question = this.questions[this.currentQuestionIndex];
                const container = document.getElementById('questionContainer');
                
                // Actualizar estad√≠sticas
                document.getElementById('currentQuestion').textContent = this.currentQuestionIndex + 1;
                document.getElementById('score').textContent = this.score;
                
                let questionHTML = `
                    <div class="question-number">${this.currentQuestionIndex + 1}</div>
                    <div class="question-type">${this.getQuestionTypeText(question.type)}</div>
                    <div class="question-text">${question.question}</div>
                `;

                if (question.type === 'multiple' || question.type === 'boolean') {
                    questionHTML += '<div class="options">';
                    question.options.forEach((option, index) => {
                        questionHTML += `<div class="option" data-index="${index}">${option}</div>`;
                    });
                    questionHTML += '</div>';
                } else if (question.type === 'fill') {
                    questionHTML += '<div class="fill-blank-container">';
                    const parts = question.question.split('_______');
                    for (let i = 0; i < parts.length; i++) {
                        questionHTML += parts[i];
                        if (i < parts.length - 1) {
                            questionHTML += `<input type="text" class="fill-blank-input" data-blank="${i}" placeholder="Respuesta ${i + 1}">`;
                        }
                    }
                    questionHTML += '</div>';
                }

                container.innerHTML = questionHTML;

                // Agregar event listeners a las opciones
                if (question.type === 'multiple' || question.type === 'boolean') {
                    const options = container.querySelectorAll('.option');
                    options.forEach(option => {
                        option.addEventListener('click', (e) => this.selectOption(e.target));
                    });
                }
            }

            getQuestionTypeText(type) {
                const types = {
                    'multiple': 'üî¢ Selecci√≥n M√∫ltiple',
                    'boolean': '‚úÖ Verdadero/Falso',
                    'fill': 'üìù Llenar Espacios'
                };
                return types[type] || type;
            }

            selectOption(option) {
                // Remover selecci√≥n anterior
                document.querySelectorAll('.option').forEach(opt => {
                    opt.classList.remove('selected');
                });
                
                // Seleccionar nueva opci√≥n
                option.classList.add('selected');
            }

            submitAnswer() {
                const question = this.questions[this.currentQuestionIndex];
                let userAnswer = null;
                let isCorrect = false;

                if (question.type === 'multiple' || question.type === 'boolean') {
                    const selected = document.querySelector('.option.selected');
                    if (!selected) {
                        this.showMessage('Por favor selecciona una respuesta', 'warning');
                        return;
                    }
                    
                    userAnswer = parseInt(selected.dataset.index);
                    isCorrect = userAnswer === question.correct;
                    
                    // Mostrar respuestas correctas/incorrectas
                    const options = document.querySelectorAll('.option');
                    options.forEach((option, index) => {
                        if (index === question.correct) {
                            option.classList.add('correct');
                        } else if (index === userAnswer && !isCorrect) {
                            option.classList.add('incorrect');
                        }
                    });
                    
                } else if (question.type === 'fill') {
                    const inputs = document.querySelectorAll('.fill-blank-input');
                    userAnswer = [];
                    isCorrect = true;
                    
                    inputs.forEach((input, index) => {
                        const value = input.value.trim();
                        userAnswer.push(value);
                        
                        const correctAnswer = question.blanks[index].toLowerCase();
                        const userValue = value.toLowerCase();
                        
                        if (userValue !== correctAnswer) {
                            isCorrect = false;
                            input.style.borderColor = '#e74c3c';
                            input.style.background = '#ffebee';
                        } else {
                            input.style.borderColor = '#00b894';
                            input.style.background = '#e8f5e8';
                        }
                    });
                }

                // Actualizar estad√≠sticas
                this.userAnswers.push({
                    question: question.question,
                    userAnswer,
                    correct: question.correct || question.blanks,
                    isCorrect,
                    explanation: question.explanation
                });

                if (isCorrect) {
                    this.score += question.points;
                    this.correctAnswers++;
                    this.createCelebrationEffect();
                } else {
                    // Efecto para respuesta incorrecta
                    this.playIncorrectSound();
                    this.createIncorrectEffect();
                }

                // Mostrar explicaci√≥n
                this.showExplanation(question.explanation, isCorrect);

                // Actualizar precisi√≥n
                const accuracy = Math.round((this.correctAnswers / (this.currentQuestionIndex + 1)) * 100);
                document.getElementById('accuracy').textContent = accuracy + '%';
                document.getElementById('score').textContent = this.score;

                // Cambiar botones
                document.getElementById('submitBtn').classList.add('hidden');
                document.getElementById('nextBtn').classList.remove('hidden');
            }

            showExplanation(explanation, isCorrect) {
                const container = document.getElementById('questionContainer');
                const explanationHTML = `
                    <div class="explanation">
                        <div class="explanation-title">
                            ${isCorrect ? '‚úÖ ¬°Correcto!' : '‚ùå Respuesta incorrecta'}
                        </div>
                        ${explanation}
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', explanationHTML);
            }

            nextQuestion() {
                this.currentQuestionIndex++;
                
                if (this.currentQuestionIndex >= this.totalQuestions) {
                    this.showFinalResults();
                } else {
                    // Resetear botones
                    document.getElementById('submitBtn').classList.remove('hidden');
                    document.getElementById('nextBtn').classList.add('hidden');
                    
                    // Cargar siguiente pregunta
                    this.loadQuestion();
                }
            }

            showFinalResults() {
                const container = document.getElementById('questionContainer');
                const buttonsContainer = document.querySelector('.buttons');
                const resultContainer = document.getElementById('resultContainer');
                
                // Ocultar pregunta actual y botones
                container.style.display = 'none';
                buttonsContainer.style.display = 'none';
                
                // Calcular estad√≠sticas finales
                const accuracy = Math.round((this.correctAnswers / this.totalQuestions) * 100);
                const maxScore = this.questions.reduce((total, q) => total + q.points, 0);
                const performance = this.getPerformanceLevel(accuracy);
                
                // Mostrar resultados
                resultContainer.innerHTML = `
                    <div class="emoji-celebration">${performance.emoji}</div>
                    <div class="final-score">${this.score}/${maxScore}</div>
                    <div class="performance">${performance.title}</div>
                    <p>${performance.message}</p>
                    
                    <div style="margin: 30px 0;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; margin: 20px 0;">
                            <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 10px;">
                                <div style="font-size: 2rem; font-weight: bold;">${this.correctAnswers}/${this.totalQuestions}</div>
                                <div style="opacity: 0.9;">Respuestas Correctas</div>
                            </div>
                            <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 10px;">
                                <div style="font-size: 2rem; font-weight: bold;">${accuracy}%</div>
                                <div style="opacity: 0.9;">Precisi√≥n</div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="detailsContainer">
                        <button id="toggleDetails" class="btn" style="margin: 20px 0;">
                            üìã Ver Detalles de Respuestas
                        </button>
                        <div id="answerDetails" class="hidden" style="text-align: left; background: rgba(255,255,255,0.1); padding: 20px; border-radius: 15px; margin-top: 20px;">
                            ${this.generateAnswerDetails()}
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <button id="restartBtn" class="btn btn-restart">üîÑ Reiniciar Trivia</button>
                        <button id="shareBtn" class="btn" style="background: linear-gradient(135deg, #fd79a8, #e84393);">üì± Compartir Resultado</button>
                    </div>
                `;
                
                resultContainer.classList.remove('hidden');
                
                // Reproducir sonido de final basado en precisi√≥n
                setTimeout(() => {
                    this.playEndGameSound(accuracy);
                }, 500);
                
                // Event listeners para botones finales
                document.getElementById('restartBtn').addEventListener('click', () => this.restart());
                document.getElementById('shareBtn').addEventListener('click', () => this.shareResults());
                document.getElementById('toggleDetails').addEventListener('click', () => this.toggleDetails());
            }

            getPerformanceLevel(accuracy) {
                if (accuracy >= 90) {
                    return {
                        emoji: 'üèÜüéâ',
                        title: '¬°EXCELENTE! Maestro de Nehem√≠as',
                        message: '¬°Incre√≠ble! Dominas perfectamente el libro de Nehem√≠as. Tu conocimiento b√≠blico es excepcional.'
                    };
                } else if (accuracy >= 80) {
                    return {
                        emoji: 'üåü‚≠ê',
                        title: '¬°MUY BIEN! Estudiante Avanzado',
                        message: '¬°Felicidades! Tienes un conocimiento s√≥lido de Nehem√≠as. Sigue estudiando para alcanzar la perfecci√≥n.'
                    };
                } else if (accuracy >= 70) {
                    return {
                        emoji: 'üìöüëç',
                        title: 'BIEN - Buen Conocimiento',
                        message: 'Tienes una base buena del libro de Nehem√≠as. Con un poco m√°s de estudio puedes mejorar a√∫n m√°s.'
                    };
                } else if (accuracy >= 50) {
                    return {
                        emoji: 'üìñüí™',
                        title: 'REGULAR - Sigue Estudiando',
                        message: 'Hay espacio para mejorar. Te recomendamos leer el libro de Nehem√≠as nuevamente y prestar atenci√≥n a los detalles.'
                    };
                } else {
                    return {
                        emoji: 'üìïüéØ',
                        title: 'NECESITAS PRACTICAR',
                        message: 'Es momento de dedicar m√°s tiempo al estudio del libro de Nehem√≠as. ¬°No te desanimes, la pr√°ctica hace al maestro!'
                    };
                }
            }

            generateAnswerDetails() {
                let details = '<h3 style="color: white; margin-bottom: 15px;">üìã Revisi√≥n Detallada:</h3>';
                
                this.userAnswers.forEach((answer, index) => {
                    const question = this.questions[index];
                    const icon = answer.isCorrect ? '‚úÖ' : '‚ùå';
                    const statusColor = answer.isCorrect ? '#00b894' : '#e74c3c';
                    
                    details += `
                        <div style="background: rgba(255,255,255,0.1); margin-bottom: 15px; padding: 15px; border-radius: 10px; border-left: 4px solid ${statusColor};">
                            <div style="font-weight: bold; margin-bottom: 8px;">
                                ${icon} Pregunta ${index + 1} (${question.points} puntos)
                            </div>
                            <div style="margin-bottom: 10px; opacity: 0.9;">
                                ${question.question}
                            </div>
                    `;
                    
                    if (question.type === 'fill') {
                        details += `
                            <div style="margin-bottom: 5px;">
                                <strong>Tu respuesta:</strong> ${Array.isArray(answer.userAnswer) ? answer.userAnswer.join(', ') : answer.userAnswer}
                            </div>
                            <div style="margin-bottom: 10px;">
                                <strong>Respuesta correcta:</strong> ${question.blanks.join(', ')}
                            </div>
                        `;
                    } else {
                        details += `
                            <div style="margin-bottom: 5px;">
                                <strong>Tu respuesta:</strong> ${question.options[answer.userAnswer] || 'No respondido'}
                            </div>
                            <div style="margin-bottom: 10px;">
                                <strong>Respuesta correcta:</strong> ${question.options[question.correct]}
                            </div>
                        `;
                    }
                    
                    details += `
                            <div style="font-size: 0.9rem; opacity: 0.8; font-style: italic;">
                                ${answer.explanation}
                            </div>
                        </div>
                    `;
                });
                
                return details;
            }

            toggleDetails() {
                const details = document.getElementById('answerDetails');
                const button = document.getElementById('toggleDetails');
                
                if (details.classList.contains('hidden')) {
                    details.classList.remove('hidden');
                    button.textContent = 'üìã Ocultar Detalles';
                } else {
                    details.classList.add('hidden');
                    button.textContent = 'üìã Ver Detalles de Respuestas';
                }
            }

            shareResults() {
                // Crear captura de los resultados
                this.captureAndShareResults();
            }

            async captureAndShareResults() {
                try {
                    const resultContainer = document.getElementById('resultContainer');
                    
                    // Preparar el contenedor para la captura
                    const originalStyle = resultContainer.style.cssText;
                    resultContainer.style.cssText += `
                        position: relative;
                        background: linear-gradient(135deg, #a29bfe, #6c5ce7);
                        border-radius: 20px;
                        padding: 40px;
                        color: white;
                        box-shadow: 0 15px 35px rgba(162, 155, 254, 0.3);
                        margin: 0;
                        max-width: none;
                        width: auto;
                        transform: scale(1);
                    `;

                    // Ocultar temporalmente los botones para la captura
                    const buttons = resultContainer.querySelectorAll('.btn');
                    const detailsContainer = document.getElementById('detailsContainer');
                    
                    buttons.forEach(btn => btn.style.display = 'none');
                    if (detailsContainer) detailsContainer.style.display = 'none';

                    // Agregar marca de agua
                    const watermark = document.createElement('div');
                    watermark.style.cssText = `
                        position: absolute;
                        bottom: 10px;
                        right: 15px;
                        font-size: 0.8rem;
                        opacity: 0.7;
                        color: white;
                        font-weight: 500;
                    `;
                    watermark.textContent = 'üèÜ Trivia de Nehem√≠as';
                    resultContainer.appendChild(watermark);

                    // Usar html2canvas si est√° disponible, sino usar Canvas API nativa
                    if (typeof html2canvas !== 'undefined') {
                        await this.captureWithHtml2Canvas(resultContainer);
                    } else {
                        // Cargar html2canvas din√°micamente
                        await this.loadHtml2Canvas();
                        await this.captureWithHtml2Canvas(resultContainer);
                    }

                    // Restaurar estilos originales
                    resultContainer.style.cssText = originalStyle;
                    buttons.forEach(btn => btn.style.display = '');
                    if (detailsContainer) detailsContainer.style.display = '';
                    if (watermark.parentNode) watermark.remove();

                } catch (error) {
                    console.error('Error al capturar:', error);
                    // Fallback: compartir texto
                    this.shareResultsText();
                }
            }

            async loadHtml2Canvas() {
                return new Promise((resolve, reject) => {
                    const script = document.createElement('script');
                    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';
                    script.onload = resolve;
                    script.onerror = reject;
                    document.head.appendChild(script);
                });
            }

            async captureWithHtml2Canvas(element) {
                try {
                    const canvas = await html2canvas(element, {
                        backgroundColor: '#667eea',
                        scale: 2, // Mayor calidad
                        useCORS: true,
                        allowTaint: false,
                        width: element.offsetWidth,
                        height: element.offsetHeight,
                        scrollX: 0,
                        scrollY: 0
                    });

                    // Convertir canvas a blob
                    canvas.toBlob(async (blob) => {
                        if (!blob) {
                            throw new Error('No se pudo crear la imagen');
                        }

                        await this.shareImageBlob(blob);
                    }, 'image/png', 0.95);

                } catch (error) {
                    console.error('Error con html2canvas:', error);
                    throw error;
                }
            }

            async shareImageBlob(blob) {
                const accuracy = Math.round((this.correctAnswers / this.totalQuestions) * 100);
                const maxScore = this.questions.reduce((total, q) => total + q.points, 0);
                
                const shareData = {
                    title: 'Mi resultado en la Trivia de Nehem√≠as',
                    text: `üèÜ ¬°Complet√© la Trivia de Nehem√≠as!\nüìä ${this.score}/${maxScore} puntos (${accuracy}%)\n\n¬øTe atreves a superarme? ü§î`,
                    files: [new File([blob], 'nehemias-trivia-resultado.png', { type: 'image/png' })]
                };

                // Verificar si el navegador soporta compartir archivos
                if (navigator.canShare && navigator.canShare(shareData)) {
                    try {
                        await navigator.share(shareData);
                        this.showMessage('¬°Resultado compartido exitosamente!', 'success');
                    } catch (error) {
                        if (error.name !== 'AbortError') {
                            console.error('Error al compartir:', error);
                            this.downloadImage(blob);
                        }
                    }
                } else {
                    // Fallback: descargar imagen
                    this.downloadImage(blob);
                }
            }

            downloadImage(blob) {
                // Crear enlace de descarga
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = 'nehemias-trivia-resultado.png';
                link.style.display = 'none';
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Limpiar URL
                setTimeout(() => URL.revokeObjectURL(url), 1000);
                
                this.showMessage('üì∏ Imagen descargada exitosamente!', 'success');
            }

            shareResultsText() {
                // Fallback: compartir como texto
                const accuracy = Math.round((this.correctAnswers / this.totalQuestions) * 100);
                const maxScore = this.questions.reduce((total, q) => total + q.points, 0);
                const performance = this.getPerformanceLevel(accuracy);
                
                const shareText = `üèÜ ¬°Complet√© la Trivia de Nehem√≠as!\n\n` +
                                `üìä Resultado: ${this.score}/${maxScore} puntos\n` +
                                `üéØ Precisi√≥n: ${accuracy}%\n` +
                                `üìö Nivel: ${performance.title}\n\n` +
                                `${performance.message}\n\n` +
                                `¬øTe atreves a superarme? ü§î`;
                
                if (navigator.share) {
                    navigator.share({
                        title: 'Trivia de Nehem√≠as - Resultados',
                        text: shareText
                    }).then(() => {
                        this.showMessage('¬°Resultado compartido!', 'success');
                    }).catch((error) => {
                        if (error.name !== 'AbortError') {
                            this.copyToClipboard(shareText);
                        }
                    });
                } else {
                    this.copyToClipboard(shareText);
                }
            }

            copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(() => {
                    this.showMessage('¬°Resultado copiado al portapapeles!', 'success');
                }).catch(() => {
                    // Fallback para navegadores que no soportan clipboard API
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.opacity = '0';
                    document.body.appendChild(textArea);
                    textArea.select();
                    
                    try {
                        document.execCommand('copy');
                        this.showMessage('¬°Resultado copiado!', 'success');
                    } catch (err) {
                        this.showMessage('No se pudo copiar el resultado', 'error');
                    }
                    
                    document.body.removeChild(textArea);
                });
            }

            restart() {
                // Resetear todas las variables
                this.currentQuestionIndex = 0;
                this.score = 0;
                this.correctAnswers = 0;
                this.userAnswers = [];
                
                // Resetear UI
                document.getElementById('questionContainer').style.display = 'block';
                document.querySelector('.buttons').style.display = 'flex';
                document.getElementById('resultContainer').classList.add('hidden');
                document.getElementById('submitBtn').classList.remove('hidden');
                document.getElementById('nextBtn').classList.add('hidden');
                
                // Mezclar preguntas para nueva experiencia
                this.shuffleQuestions();
                
                // Cargar primera pregunta
                this.loadQuestion();
                
                // Mostrar mensaje de motivaci√≥n
                this.showMessage('¬°Nueva trivia iniciada! üéØ', 'success');
            }

            shuffleQuestions() {
                for (let i = this.questions.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [this.questions[i], this.questions[j]] = [this.questions[j], this.questions[i]];
                }
            }

            createCelebrationEffect() {
                // Crear part√≠culas de celebraci√≥n
                for (let i = 0; i < 15; i++) {
                    setTimeout(() => {
                        const particle = document.createElement('div');
                        particle.className = 'particle';
                        particle.style.left = Math.random() * 100 + '%';
                        particle.style.top = '100%';
                        particle.style.background = ['#ffd700', '#ff6b6b', '#4ecdc4', '#45b7d1'][Math.floor(Math.random() * 4)];
                        document.body.appendChild(particle);
                        
                        setTimeout(() => {
                            if (particle.parentNode) {
                                particle.remove();
                            }
                        }, 3000);
                    }, i * 50);
                }
                
                // Efecto de sonido de trompeta
                this.playTrumpetSound();
            }

            // Nueva funci√≥n para reproducir sonido de trompeta
            playTrumpetSound() {
                if ('AudioContext' in window || 'webkitAudioContext' in window) {
                    try {
                        const AudioContext = window.AudioContext || window.webkitAudioContext;
                        const audioContext = new AudioContext();
                        
                        // Crear secuencia de notas para simular una trompeta de celebraci√≥n
                        const notes = [
                            { frequency: 523.25, duration: 0.2 }, // C5
                            { frequency: 659.25, duration: 0.2 }, // E5
                            { frequency: 783.99, duration: 0.3 }  // G5
                        ];
                        
                        let currentTime = audioContext.currentTime;
                        
                        notes.forEach((note, index) => {
                            // Crear oscilador para cada nota
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();
                            
                            // Configurar oscilador con forma de onda que simule trompeta
                            oscillator.type = 'sawtooth';
                            oscillator.frequency.setValueAtTime(note.frequency, currentTime);
                            
                            // Configurar envelope para sonido m√°s realista
                            gainNode.gain.setValueAtTime(0, currentTime);
                            gainNode.gain.linearRampToValueAtTime(0.3, currentTime + 0.05); // Attack
                            gainNode.gain.exponentialRampToValueAtTime(0.1, currentTime + note.duration - 0.05); // Decay
                            gainNode.gain.linearRampToValueAtTime(0, currentTime + note.duration); // Release
                            
                            // Conectar nodos
                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);
                            
                            // Programar inicio y fin
                            oscillator.start(currentTime);
                            oscillator.stop(currentTime + note.duration);
                            
                            currentTime += note.duration * 0.7; // Overlap slight entre notas
                        });
                        
                    } catch (error) {
                        console.log('Audio no disponible:', error);
                        // Fallback: vibraci√≥n en dispositivos m√≥viles
                        if ('vibrate' in navigator) {
                            navigator.vibrate([100, 50, 100]);
                        }
                    }
                } else if ('vibrate' in navigator) {
                    // Fallback para navegadores sin Web Audio API
                    navigator.vibrate([100, 50, 100, 50, 200]);
                }
            }

            // Nueva funci√≥n para sonido de respuesta incorrecta
            playIncorrectSound() {
                if ('AudioContext' in window || 'webkitAudioContext' in window) {
                    try {
                        const AudioContext = window.AudioContext || window.webkitAudioContext;
                        const audioContext = new AudioContext();
                        
                        // Crear sonido descendente para indicar error
                        const notes = [
                            { frequency: 400, duration: 0.15 }, // Tono medio-bajo
                            { frequency: 300, duration: 0.15 }, // M√°s bajo
                            { frequency: 200, duration: 0.25 }  // Muy bajo (sonido de "error")
                        ];
                        
                        let currentTime = audioContext.currentTime;
                        
                        notes.forEach((note, index) => {
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();
                            
                            // Usar onda cuadrada para sonido m√°s "duro"
                            oscillator.type = 'square';
                            oscillator.frequency.setValueAtTime(note.frequency, currentTime);
                            
                            // Envelope m√°s abrupto para sonido de error
                            gainNode.gain.setValueAtTime(0, currentTime);
                            gainNode.gain.linearRampToValueAtTime(0.2, currentTime + 0.02); // Attack r√°pido
                            gainNode.gain.exponentialRampToValueAtTime(0.05, currentTime + note.duration - 0.02); // Decay
                            gainNode.gain.linearRampToValueAtTime(0, currentTime + note.duration); // Release
                            
                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);
                            
                            oscillator.start(currentTime);
                            oscillator.stop(currentTime + note.duration);
                            
                            currentTime += note.duration * 0.6; // Overlap para continuidad
                        });
                        
                    } catch (error) {
                        console.log('Audio no disponible:', error);
                        // Fallback: vibraci√≥n diferente para error
                        if ('vibrate' in navigator) {
                            navigator.vibrate([200, 100, 200]);
                        }
                    }
                } else if ('vibrate' in navigator) {
                    navigator.vibrate([200, 100, 200]);
                }
            }

            // Nueva funci√≥n para efectos visuales de respuesta incorrecta
            createIncorrectEffect() {
                // Crear part√≠culas rojas que caen
                for (let i = 0; i < 8; i++) {
                    setTimeout(() => {
                        const particle = document.createElement('div');
                        particle.style.cssText = `
                            position: fixed;
                            width: 8px;
                            height: 8px;
                            background: #e74c3c;
                            border-radius: 50%;
                            left: ${Math.random() * 100}%;
                            top: 20%;
                            pointer-events: none;
                            animation: fallDown 1.5s ease-in forwards;
                            z-index: 1000;
                            box-shadow: 0 0 10px #e74c3c;
                        `;
                        document.body.appendChild(particle);
                        
                        setTimeout(() => {
                            if (particle.parentNode) {
                                particle.remove();
                            }
                        }, 1500);
                    }, i * 30);
                }
                
                // Efecto de shake en el contenedor
                const container = document.getElementById('questionContainer');
                container.style.animation = 'shake 0.5s ease-in-out';
                setTimeout(() => {
                    container.style.animation = '';
                }, 500);
                
                // Agregar animaciones si no existen
                if (!document.querySelector('#incorrectAnimations')) {
                    const style = document.createElement('style');
                    style.id = 'incorrectAnimations';
                    style.textContent = `
                        @keyframes fallDown {
                            0% { transform: translateY(0) rotate(0deg); opacity: 1; }
                            100% { transform: translateY(80vh) rotate(360deg); opacity: 0; }
                        }
                        @keyframes shake {
                            0%, 100% { transform: translateX(0); }
                            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
                            20%, 40%, 60%, 80% { transform: translateX(5px); }
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            // Nueva funci√≥n para sonidos de final de juego seg√∫n precisi√≥n
            playEndGameSound(accuracy) {
                if ('AudioContext' in window || 'webkitAudioContext' in window) {
                    try {
                        const AudioContext = window.AudioContext || window.webkitAudioContext;
                        const audioContext = new AudioContext();
                        let melody = [];
                        
                        if (accuracy >= 90) {
                            // Fanfarria victoriosa (90%+)
                            melody = [
                                { frequency: 523.25, duration: 0.2 }, // C5
                                { frequency: 659.25, duration: 0.2 }, // E5
                                { frequency: 783.99, duration: 0.2 }, // G5
                                { frequency: 1046.5, duration: 0.3 }, // C6
                                { frequency: 783.99, duration: 0.2 }, // G5
                                { frequency: 1046.5, duration: 0.4 }  // C6 final
                            ];
                            this.createVictoryFireworks();
                            
                        } else if (accuracy >= 80) {
                            // Melod√≠a de logro (80-89%)
                            melody = [
                                { frequency: 523.25, duration: 0.25 }, // C5
                                { frequency: 659.25, duration: 0.25 }, // E5
                                { frequency: 783.99, duration: 0.35 }, // G5
                                { frequency: 659.25, duration: 0.25 }  // E5
                            ];
                            this.createSuccessEffect();
                            
                        } else if (accuracy >= 70) {
                            // Sonido neutral positivo (70-79%)
                            melody = [
                                { frequency: 440, duration: 0.3 },     // A4
                                { frequency: 523.25, duration: 0.3 },  // C5
                                { frequency: 659.25, duration: 0.4 }   // E5
                            ];
                            
                        } else if (accuracy >= 50) {
                            // Sonido de √°nimo (50-69%)
                            melody = [
                                { frequency: 349.23, duration: 0.4 },  // F4
                                { frequency: 392, duration: 0.4 },     // G4
                                { frequency: 440, duration: 0.5 }      // A4
                            ];
                            
                        } else {
                            // Sonido motivacional (menos de 50%)
                            melody = [
                                { frequency: 293.66, duration: 0.5 },  // D4
                                { frequency: 329.63, duration: 0.4 },  // E4
                                { frequency: 349.23, duration: 0.6 }   // F4
                            ];
                        }
                        
                        // Reproducir la melod√≠a
                        let currentTime = audioContext.currentTime + 0.1;
                        
                        melody.forEach((note, index) => {
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();
                            
                            oscillator.type = accuracy >= 80 ? 'sawtooth' : 'sine';
                            oscillator.frequency.setValueAtTime(note.frequency, currentTime);
                            
                            const maxVolume = accuracy >= 90 ? 0.4 : 0.25;
                            gainNode.gain.setValueAtTime(0, currentTime);
                            gainNode.gain.linearRampToValueAtTime(maxVolume, currentTime + 0.05);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, currentTime + note.duration - 0.05);
                            gainNode.gain.linearRampToValueAtTime(0, currentTime + note.duration);
                            
                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);
                            
                            oscillator.start(currentTime);
                            oscillator.stop(currentTime + note.duration);
                            
                            currentTime += note.duration * 0.8;
                        });
                        
                    } catch (error) {
                        console.log('Audio de final no disponible:', error);
                        // Vibraci√≥n de celebraci√≥n basada en precisi√≥n
                        if ('vibrate' in navigator) {
                            if (accuracy >= 90) {
                                navigator.vibrate([100, 50, 100, 50, 100, 50, 200]);
                            } else if (accuracy >= 70) {
                                navigator.vibrate([150, 100, 150]);
                            } else {
                                navigator.vibrate([200]);
                            }
                        }
                    }
                }
            }

            // Efectos visuales especiales para alta precisi√≥n
            createVictoryFireworks() {
                // Fuegos artificiales para 90%+
                for (let i = 0; i < 25; i++) {
                    setTimeout(() => {
                        const firework = document.createElement('div');
                        const colors = ['#ffd700', '#ff6b6b', '#4ecdc4', '#45b7d1', '#f093fb', '#a8edea'];
                        firework.style.cssText = `
                            position: fixed;
                            width: 6px;
                            height: 6px;
                            background: ${colors[Math.floor(Math.random() * colors.length)]};
                            border-radius: 50%;
                            left: ${20 + Math.random() * 60}%;
                            top: ${30 + Math.random() * 40}%;
                            pointer-events: none;
                            animation: fireworkExplode 2s ease-out forwards;
                            z-index: 1000;
                            box-shadow: 0 0 15px currentColor;
                        `;
                        document.body.appendChild(firework);
                        
                        setTimeout(() => {
                            if (firework.parentNode) {
                                firework.remove();
                            }
                        }, 2000);
                    }, i * 80);
                }
                
                // Agregar animaci√≥n de fuegos artificiales
                if (!document.querySelector('#fireworkAnimations')) {
                    const style = document.createElement('style');
                    style.id = 'fireworkAnimations';
                    style.textContent = `
                        @keyframes fireworkExplode {
                            0% { 
                                transform: scale(0) rotate(0deg); 
                                opacity: 1; 
                            }
                            50% { 
                                transform: scale(3) rotate(180deg); 
                                opacity: 1; 
                            }
                            100% { 
                                transform: scale(1) rotate(360deg); 
                                opacity: 0; 
                            }
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            createSuccessEffect() {
                // Efecto de √©xito para 80-89%
                for (let i = 0; i < 15; i++) {
                    setTimeout(() => {
                        const star = document.createElement('div');
                        star.innerHTML = '‚≠ê';
                        star.style.cssText = `
                            position: fixed;
                            font-size: ${1.5 + Math.random() * 1.5}rem;
                            left: ${Math.random() * 100}%;
                            top: ${Math.random() * 100}%;
                            pointer-events: none;
                            animation: starTwinkle 1.5s ease-in-out forwards;
                            z-index: 1000;
                        `;
                        document.body.appendChild(star);
                        
                        setTimeout(() => {
                            if (star.parentNode) {
                                star.remove();
                            }
                        }, 1500);
                    }, i * 100);
                }
                
                if (!document.querySelector('#starAnimations')) {
                    const style = document.createElement('style');
                    style.id = 'starAnimations';
                    style.textContent = `
                        @keyframes starTwinkle {
                            0%, 100% { transform: scale(0) rotate(0deg); opacity: 0; }
                            50% { transform: scale(1.5) rotate(180deg); opacity: 1; }
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            createParticles() {
                // Crear part√≠culas de fondo decorativas
                setInterval(() => {
                    if (Math.random() < 0.3) {
                        const particle = document.createElement('div');
                        particle.style.cssText = `
                            position: fixed;
                            width: 4px;
                            height: 4px;
                            background: rgba(255, 215, 0, 0.6);
                            border-radius: 50%;
                            left: ${Math.random() * 100}%;
                            top: 100%;
                            pointer-events: none;
                            animation: floatUp 4s linear forwards;
                            z-index: 1;
                        `;
                        document.body.appendChild(particle);
                        
                        setTimeout(() => {
                            if (particle.parentNode) {
                                particle.remove();
                            }
                        }, 4000);
                    }
                }, 2000);
                
                // Agregar animaci√≥n para part√≠culas flotantes
                if (!document.querySelector('#particleStyle')) {
                    const style = document.createElement('style');
                    style.id = 'particleStyle';
                    style.textContent = `
                        @keyframes floatUp {
                            0% { transform: translateY(0) rotate(0deg); opacity: 0; }
                            10% { opacity: 1; }
                            90% { opacity: 1; }
                            100% { transform: translateY(-100vh) rotate(360deg); opacity: 0; }
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            showMessage(message, type = 'info') {
                const messageDiv = document.createElement('div');
                const colors = {
                    success: '#00b894',
                    warning: '#fdcb6e',
                    error: '#e74c3c',
                    info: '#74b9ff'
                };
                
                messageDiv.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: ${colors[type]};
                    color: white;
                    padding: 15px 25px;
                    border-radius: 10px;
                    font-weight: 600;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    z-index: 1000;
                    animation: slideIn 0.3s ease, slideOut 0.3s ease 2.7s forwards;
                `;
                
                messageDiv.textContent = message;
                document.body.appendChild(messageDiv);
                
                // Agregar animaciones si no existen
                if (!document.querySelector('#messageAnimations')) {
                    const style = document.createElement('style');
                    style.id = 'messageAnimations';
                    style.textContent = `
                        @keyframes slideIn {
                            from { transform: translateX(100%); opacity: 0; }
                            to { transform: translateX(0); opacity: 1; }
                        }
                        @keyframes slideOut {
                            from { transform: translateX(0); opacity: 1; }
                            to { transform: translateX(100%); opacity: 0; }
                        }
                    `;
                    document.head.appendChild(style);
                }
                
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.remove();
                    }
                }, 3000);
            }
        }

        // Inicializar la trivia cuando la p√°gina cargue
        document.addEventListener('DOMContentLoaded', () => {
            new NehemiasTrivia();
        });
    </script>
</body>
</html>
